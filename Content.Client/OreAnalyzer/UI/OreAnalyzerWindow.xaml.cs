using Content.Shared.Damage.Prototypes;
using Content.Shared.Materials;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Text;
using Content.Shared.Temperature;
using static Content.Shared.Mining.Components.SharedOreAnalyzerComponent;

namespace Content.Client.OreAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class OreAnalyzerWindow : DefaultWindow
    {

        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        public OreAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(OreAnalyzerScannedUserMessage msg)
        {
            var materialText = new StringBuilder();
            var reagentText = new StringBuilder();
            var tempText = new StringBuilder();
            var entities = IoCManager.Resolve<IEntityManager>();

            var hasMaterials = false;
            var hasReagents = false;

            if (msg.TargetEntity != null && entities.TryGetComponent<MaterialComponent>(msg.TargetEntity, out var materials))
            {

                foreach (var (material, quantity) in materials.Materials)
                {
                    if (quantity > 0)
                    {
                        if (!hasMaterials)
                            materialText.Append("\nRefinable Materials");

                        hasMaterials = true;
                        materialText.Append($"\n" + material + " - Quantity: " + quantity);
                        materialText.AppendLine();                        
                    }
                }
                OreMaterials.Text = materialText.ToString();
                
                SetSize = (300, 225);
            }

            if (msg.TargetMeltingTemp != null)
            {
                tempText.Append(Loc.GetString("ore-analyzer-window-temperature-text"));
                tempText.AppendLine();
                tempText.Append(Loc.GetString("ore-analyzer-window-temperature-val-text",
                                    ("tempK", $"{msg.TargetMeltingTemp.Value:0.#}"),
                                    ("tempC", $"{TemperatureHelpers.KelvinToCelsius(msg.TargetMeltingTemp.Value):0.#}")));
                tempText.AppendLine();
                OreMeltingPoint.Text = tempText.ToString();
            }

            if (msg.SolutionContainer != null)
            {

                if (msg.SolutionContainer.Contents.Count > 0)
                {
                    hasReagents = true;
                    reagentText.Append("\nExtractable Reagents");
                }

                foreach (var reagent in msg.SolutionContainer.Contents)
                {
                    //var localizedName = _prototypeManager.TryIndex(reagent.Id, out ReagentPrototype? p)
                    //? p.LocalizedName
                    //: Loc.GetString("reagent-dispenser-window-reagent-name-not-found-text");

                    var quantity = Loc.GetString("reagent-dispenser-window-quantity-label-text", ("quantity", reagent.Quantity));

                    reagentText.Append($"\n" + reagent.Id + " - " + quantity);
                    reagentText.AppendLine();
                }
                OreReagents.Text = reagentText.ToString();
                SetSize = (300, 225);
            }

            if (hasMaterials && hasReagents)
                SetSize = (300, 300);

            if (!hasMaterials && !hasReagents)
            {
                OreMaterials.Text = "No extractable materials detected.";
                SetSize = (300, 150);
            }
        }
    }
}
