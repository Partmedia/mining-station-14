using System.Linq;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Surgery;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Shared.Body.Part;
using Content.Shared.Body.Organ;
using Robust.Client.Graphics;
using Robust.Client.GameObjects;
using static Content.Client.Surgery.SurgeryWindow;

namespace Content.Client.Surgery
{

    [GenerateTypedNameReferences]
    public sealed partial class SurgeryWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action<BaseButton.ButtonEventArgs, SurgerySlotButton>? OnSurgerySlotButtonPressed;
        public event Action<BaseButton.ButtonEventArgs, OrganSlotButton>? OnOrganSlotButtonPressed;
        public static int DefaultButtonSize = 112;

        /// <summary>
        ///
        /// </summary>
        public SurgeryWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

        }

        private string GetPartStatusStr(BodyPartComponent part, SharedPartStatus status)
        {
            if (status.Opened && part.Container)
                return "_opened";
            else if (status.EndoOpened && part.EndoSkeleton)
                return "_endo_open";
            else if (status.Retracted && part.Incisable)
                return "_retracted";
            else if (status.Incised && part.Incisable)
                return "_incised";
            else if (status.ExoOpened && part.ExoSkeleton)
                return "_exo_opened";
            else
                return "";
        }

        //TODO probably should use an actual visualiser here but it works for now
        private string FormatState(string symmetry, string type, string status)
        {
            var symString = "";

            if (symmetry == "Left")
                symString = "l_";
            else if (symmetry == "Right")
                symString = "r_";

            return symString + type.ToLower() + status + "_icon";
        }

        /// <summary>
        /// Adding body part slots to interface, part slot buttons are assigned to rows based on their type
        /// </summary>
        public void UpdateSurgeryMenu(SurgeryBoundUserInterfaceState state)
        {

            SurgeryLayout.Children.Clear();
            var bodyPartSlotList = new BodyPartSlotList();
            var slotParts = state.SlotPartsStatus;

            if (state.BodyPartSlots is null)
            {
                bodyPartSlotList.Children.Add(new Label { Text = "Body has no available part slots to operate on." }); //TODO loc
                return;
            }

            var headWingSlotsRow = new SurgerySlotRow();
            List<SlotButtonContainer> headWingSlotButtons = new List<SlotButtonContainer>();

            var armTorsoSlotsRow = new SurgerySlotRow();
            List<SlotButtonContainer> armTorsoSlotButtons = new List<SlotButtonContainer>();

            var handOtherSlotsRow = new SurgerySlotRow();
            List<SlotButtonContainer> handOtherSlotButtons = new List<SlotButtonContainer>();

            var legTailSlotsRow = new SurgerySlotRow();
            List<SlotButtonContainer> legTailSlotButtons = new List<SlotButtonContainer>();

            var footSlotsRow = new SurgerySlotRow();
            List<SlotButtonContainer> footSlotButtons = new List<SlotButtonContainer>();

            List<SlotButtonContainer> slotButtons = new List<SlotButtonContainer>();

            Dictionary<string, OrganSlotCol> partOrgans = new Dictionary<string, OrganSlotCol>();

            for (var i = 0; i < state.BodyPartSlots.Count; i++)
            {
                if (state.BodyPartSlots[i] != null) {

                   
                    var iconRow = new SlotButtonIconRow();

                    var typeVal = state.BodyPartSlots[i].Type ?? 0;
                    var slotType = ((BodyPartType)typeVal).ToString();

                    var buttonContainer = new SlotButtonContainer(state.BodyPartSlots[i], slotType);
                    var button = new SurgerySlotButton(state.BodyPartSlots[i],slotType);
                    button.OnPressed += args => OnSurgerySlotButtonPressed?.Invoke(args, button);

                    var attachmentUid = state.BodyPartSlots[i].Attachment;

                    var cautIcon = new SlotIconContainer("Cauterised");
                    var attchIcon = new SlotIconContainer("Attachment");
                    var bleedIcon = new SlotIconContainer("Bleeding");

                    if (attachmentUid is not null)
                    {
                        if (IoCManager.Resolve<IEntityManager>().TryGetComponent<SpriteComponent?>(state.BodyPartSlots[i].Attachment, out var sprite))
                        {
                            var attachmentSprite = new StatusIconSprite();
                            attachmentSprite.Sprite = sprite;
                            attchIcon.Children.Add(attachmentSprite);
                        }
                    }

                    if (state.BodyPartSlots[i].Cauterised)
                    {
                        cautIcon.TextureNormal = Theme.ResolveTexture("/SurgerySlots/Cauterised_Icon");
                    }

                    var partUid = state.BodyPartSlots[i].Child;

                    if (!state.BodyPartSlots[i].Cauterised && attachmentUid is null && partUid is null) //this is currently assuming any attachment will prevent bleeding... which is fine for now but may need to change
                    {
                        bleedIcon.TextureNormal = Theme.ResolveTexture("/SurgerySlots/Bleeding_Icon");
                    }

                    iconRow.Children.Add(attchIcon);
                    iconRow.Children.Add(cautIcon);
                    iconRow.Children.Add(bleedIcon);


                    if (partUid is not null)
                    {
                        if (IoCManager.Resolve<IEntityManager>().TryGetComponent<BodyPartComponent?>(state.BodyPartSlots[i].Child, out var bodyPart))
                            buttonContainer.Symmetry = ((BodyPartSymmetry) bodyPart.Symmetry).ToString();

                        if (IoCManager.Resolve<IEntityManager>().TryGetComponent<SpriteComponent?>(state.BodyPartSlots[i].Child, out var sprite)) {
                            var bodyPartSprite = new BodyPartSprite();
                            if (bodyPart is not null)
                            {
                                var status = GetPartStatusStr(bodyPart, slotParts[partUid.Value]);
                                sprite.LayerSetState(0, FormatState(((BodyPartSymmetry) bodyPart.Symmetry).ToString(), slotType, status));
                            }
                            bodyPartSprite.Sprite = sprite;

                            button.Children.Add(bodyPartSprite);
                        }
                    }

                    buttonContainer.Children.Add(iconRow);
                    buttonContainer.Children.Add(button);

                    slotButtons.Add(buttonContainer);              
                }
            }

            for (var i = 0; i < slotButtons.Count; i++)
            {
                //symmetrical part types are added to the start/end of list, rest are placed in centre
                //TODO assign symmetry via part slot
                void AddToSlotRow(SlotButtonContainer button, List<SlotButtonContainer> list, bool symmetry)
                {
                    if (!symmetry)
                    {
                        var index = (list.Count + 1) / 2;
                        list.Insert(index, button);
                    }
                    else
                    {
                        var counterpartFound = false;
                        for (var j = 0; j < list.Count; j++)
                        {
                            if (list[j].SlotType == button.SlotType && !list[j].Counterpart)
                            {
                                counterpartFound = true;
                                if (button.Symmetry == "Left") //if we have assigned a left value from the constituent body part above, it overrides here
                                {
                                    list.Insert(0, button);
                                    break;
                                }
                                else
                                {
                                    button.Symmetry = "Right"; //right now we are assuming left is always found first, followed by right... this is not necessarily correct //TODO fix by assigning symmetry to the slot
                                    button.Counterpart = true;
                                    if (list.Count > 0)
                                        list.Insert(list.Count - (j - 1), button);
                                    else
                                        list.Insert(0, button);
                                    break;
                                }
                            }        
                        }
                        if (!counterpartFound)
                        {
                            if (button.Symmetry == "Right") //if we have assigned a right value from the constituent body part above, it overrides here
                            {
                                button.Counterpart = true;
                                if (list.Count > 0)
                                    list.Insert(list.Count - 1, button); //TODO fix still not ideal but better than assuming its position, just wouldn't work on something with four arms as well
                                else
                                    list.Insert(0, button);
                            }
                            else
                            {
                                button.Symmetry = "Left"; //TODO fix
                                button.Counterpart = true;
                                list.Insert(0, button);
                            }

                        }
                    }
                }

                switch (slotButtons[i].SlotType)
                {
                    case "Head":
                        AddToSlotRow(slotButtons[i], headWingSlotButtons, false);
                        break;
                    case "Wing":
                        AddToSlotRow(slotButtons[i], headWingSlotButtons, true);
                        break;
                    case "Torso":
                        AddToSlotRow(slotButtons[i], armTorsoSlotButtons, false);
                        break;
                    case "Arm":
                        AddToSlotRow(slotButtons[i], armTorsoSlotButtons, true);
                        break;
                    case "Hand":
                        AddToSlotRow(slotButtons[i], handOtherSlotButtons, true);
                        break;
                    case "Leg":
                        AddToSlotRow(slotButtons[i], legTailSlotButtons, true);
                        break;
                    case "Foot":
                        AddToSlotRow(slotButtons[i], footSlotButtons, true);
                        break;
                    case "Tail":
                        AddToSlotRow(slotButtons[i], legTailSlotButtons, false);
                        break;
                    default: //other
                        AddToSlotRow(slotButtons[i], handOtherSlotButtons, false);
                        break;
                }
            }

            for (var i = 0; i < headWingSlotButtons.Count; i++)
                headWingSlotsRow.Children.Add(headWingSlotButtons[i]);

            for (var i = 0; i < armTorsoSlotButtons.Count; i++)
                armTorsoSlotsRow.Children.Add(armTorsoSlotButtons[i]);

            for (var i = 0; i < handOtherSlotButtons.Count; i++)
                handOtherSlotsRow.Children.Add(handOtherSlotButtons[i]);

            for (var i = 0; i < legTailSlotButtons.Count; i++)
                legTailSlotsRow.Children.Add(legTailSlotButtons[i]);

            for (var i = 0; i < footSlotButtons.Count; i++)
                footSlotsRow.Children.Add(footSlotButtons[i]);

            bodyPartSlotList.Children.Add(headWingSlotsRow);
            bodyPartSlotList.Children.Add(armTorsoSlotsRow);
            bodyPartSlotList.Children.Add(handOtherSlotsRow);
            bodyPartSlotList.Children.Add(legTailSlotsRow);
            bodyPartSlotList.Children.Add(footSlotsRow);

            for (var i = 0; i < state.OrganSlots.Count; i++)
            {
                //create button
                var iconRow = new SlotButtonIconRow();
                var buttonContainer = new OrganSlotButtonContainer();

                var typeVal = state.OrganSlots[i].Type ?? 0;
                var organSlotType = ((OrganType) typeVal).ToString();
                var button = new OrganSlotButton(state.OrganSlots[i],organSlotType);
                button.OnPressed += args => OnOrganSlotButtonPressed?.Invoke(args, button);

                var attachmentUid = state.OrganSlots[i].Attachment;

                var cautIcon = new SlotIconContainer("Cauterised");
                var attchIcon = new SlotIconContainer("Attachment");
                var bleedIcon = new SlotIconContainer("Bleeding");

                if (attachmentUid is not null)
                {
                    if (IoCManager.Resolve<IEntityManager>().TryGetComponent<SpriteComponent?>(state.OrganSlots[i].Attachment, out var isprite))
                    {
                        var attachmentSprite = new StatusIconSprite();
                        attachmentSprite.Sprite = isprite;

                        attchIcon.Children.Add(attachmentSprite);
                    }
                }

                if (state.OrganSlots[i].Cauterised)
                {
                    cautIcon.TextureNormal = Theme.ResolveTexture("/SurgerySlots/Cauterised_Icon");
                }

                if (!state.OrganSlots[i].Cauterised && attachmentUid is null && state.OrganSlots[i].Child is null)
                {
                    bleedIcon.TextureNormal = Theme.ResolveTexture("/SurgerySlots/Bleeding_Icon");
                }

                iconRow.Children.Add(attchIcon);
                iconRow.Children.Add(cautIcon);
                iconRow.Children.Add(bleedIcon);

                //add button sprite
                if (state.OrganSlots[i].Child != null && IoCManager.Resolve<IEntityManager>().TryGetComponent<SpriteComponent?>(state.OrganSlots[i].Child, out var sprite))
                {
                    var organSprite = new BodyPartSprite();
                    organSprite.Sprite = sprite;
                    button.Children.Add(organSprite);
                }

                if (!partOrgans.ContainsKey(state.OrganSlots[i].Parent.ToString()))
                {
                    partOrgans.Add(state.OrganSlots[i].Parent.ToString(), new OrganSlotCol());
                    if (slotParts.ContainsKey(state.OrganSlots[i].Parent))
                        partOrgans[state.OrganSlots[i].Parent.ToString()].Children.Add(new Label { Text = slotParts[state.OrganSlots[i].Parent].PartType.ToString() }); ;
                }

                buttonContainer.Children.Add(iconRow);
                buttonContainer.Children.Add(button);

                //add button to dict
                partOrgans[state.OrganSlots[i].Parent.ToString()].Children.Add(buttonContainer);
            }

            SurgeryLayout.Children.Add(bodyPartSlotList);
            //iterate partOrgans, add cols to surgery menu
            var width = 625;
            foreach (KeyValuePair<string, OrganSlotCol> entry in partOrgans)
            {
                width += 100;
                SurgeryLayout.Children.Add(new Padding());
                SurgeryLayout.Children.Add(entry.Value);
            }
            SetSize = (width, 675);
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (SurgeryBoundUserInterfaceState) state;
            UpdateSurgeryMenu(castState);
        }

        public sealed class SlotButtonContainer : BoxContainer
        {
            public BodyPartSlot Slot { get; }
            public string Symmetry = "None";
            public bool Counterpart = false;
            public string SlotType { get; }

            public SlotButtonContainer(BodyPartSlot slot, string slotType)
            {
                Slot = slot;
                SlotType = slotType;
                Orientation = LayoutOrientation.Horizontal;
                Align = AlignMode.Center;
            }

        }

        public sealed class OrganSlotButtonContainer : BoxContainer
        {
            public OrganSlotButtonContainer()
            {
                Orientation = LayoutOrientation.Horizontal;
                Align = AlignMode.Center;
            }

        }

        public sealed class SlotButtonIconRow : BoxContainer
        {
            public SlotButtonIconRow()
            {
                Orientation = LayoutOrientation.Vertical;
            }
        }

        public sealed class SlotIconContainer : TextureButton
        {
            public SlotIconContainer(string iconType)
            {
                MinSize = (DefaultButtonSize/3, DefaultButtonSize/3);
                MaxSize = (DefaultButtonSize/3, DefaultButtonSize/3);
                TextureNormal = Theme.ResolveTexture("/SurgerySlots/"+iconType);
            }
        }

        public sealed class SurgerySlotButton : TextureButton
        {
            public BodyPartSlot Slot { get; }
            public string SlotType { get; }

            public SurgerySlotButton(BodyPartSlot slot, string slotType)
            {
                Slot = slot;
                SlotType = slotType;
                MinSize = (DefaultButtonSize, DefaultButtonSize);
                MaxSize = (DefaultButtonSize, DefaultButtonSize);
                TextureNormal = Theme.ResolveTexture("/SurgerySlots/" + SlotType);
            }
        }

        public sealed class OrganSlotButton : TextureButton
        {
            public OrganSlot Slot { get; }
            public string SlotType { get; }

            public OrganSlotButton(OrganSlot slot, string slotType)
            {
                Slot = slot;
                SlotType = slotType;
                MinSize = (DefaultButtonSize, DefaultButtonSize);
                MaxSize = (DefaultButtonSize, DefaultButtonSize);
                TextureNormal = Theme.ResolveTexture("/SurgerySlots/" + SlotType);
            }
        }

        public sealed class Padding : Control
        {
            public Padding()
            {
                MinSize = (0, 10);
            }
        }

        public sealed class SurgerySlotRow : BoxContainer
        {
            public SurgerySlotRow()
            {
                Orientation = LayoutOrientation.Horizontal;
                Align = AlignMode.Center;
            }
        }

        public sealed class BodyPartSlotList : BoxContainer
        {
            public BodyPartSlotList()
            {
                Orientation = LayoutOrientation.Vertical;
                HorizontalExpand = true;
            }
        }

        public sealed class OrganSlotCol : BoxContainer
        {
            public OrganSlotCol()
            {
                Orientation = LayoutOrientation.Vertical;
                Align = AlignMode.Center;
            }
        }

        public sealed class BodyPartSprite : SpriteView
        {
            public BodyPartSprite()
            {
                OverrideDirection = Direction.South;
                Scale = (3, 3);
            }
        }

        public sealed class StatusIconSprite : SpriteView
        {
            public StatusIconSprite()
            {
                OverrideDirection = Direction.South;
                Scale = (2, 2);
            }
        }

    }
}
