/**
 * Component and system for tracking power generated by an entity with a
 * PowerSupplierComponent so that the station can be charged for power in the
 * Mining game mode.
 */

using Content.Server.Power.Components;
using Content.Server.Power.EntitySystems;
using Content.Server.Station.Systems;
using Content.Shared.Examine;
using Content.Shared.Power;
using Robust.Server.GameObjects;

/**
 * Station component to track power used by station. This has to be on the
 * station to prevent the power bill from being erased if the generator is sold
 * or destroyed.
 */
[RegisterComponent]
public class StationPowerTrackerComponent : Component
{
    /**
     * Total energy sold to station in kWHr.
     */
    [ViewVariables(VVAccess.ReadWrite)]
    public float TotalEnergy;

    /**
     * Total price of energy sold in spacebucks. Rounded to the nearest int
     * spacebucks at the end of round.
     */
    [ViewVariables(VVAccess.ReadWrite)]
    public float TotalPrice;
}

/**
 * Put this on an entity to track its power generation.
 */
[RegisterComponent]
public class PowerTrackedComponent : Component
{
    /**
     * Price per kWHr for energy produced, in spacebucks.
     */
    [DataField("pricePerKWHr")]
    [ViewVariables(VVAccess.ReadWrite)]
    public float PriceKWHr = 300f;
}

public sealed class PowerTrackerSystem : EntitySystem
{
    [Dependency] private readonly AppearanceSystem _appearance = default!;
    [Dependency] private readonly StationSystem _station = default!;

    public override void Initialize()
    {
        base.Initialize();
        SubscribeLocalEvent<NetworkBatteryPostSync>(OnPostPowerSolve);
        SubscribeLocalEvent<PowerTrackedComponent, ExaminedEvent>(OnExamined);
        SubscribeLocalEvent<PowerTrackedComponent, ExtensionCableSystem.ProviderConnectedEvent>(OnProviderConnected);
        SubscribeLocalEvent<PowerTrackedComponent, ExtensionCableSystem.ProviderDisconnectedEvent>(OnProviderDisconnected);
    }
    
    private void OnProviderConnected(EntityUid uid, PowerTrackedComponent comp, ExtensionCableSystem.ProviderConnectedEvent args)
    {
    }

    private void OnProviderDisconnected(EntityUid uid, PowerTrackedComponent comp, ExtensionCableSystem.ProviderDisconnectedEvent args)
    {
    }

    private void OnPostPowerSolve(NetworkBatteryPostSync ev)
    {
        foreach (var (supplier, tracker) in EntityManager.EntityQuery<PowerSupplierComponent, PowerTrackedComponent>())
        {
            float energy = supplier.CurrentSupply * ev.FrameTime;
            float kwhr = energy / (1000 * 3600); // energy in kwhr = joules / (1000 J/s * 3600 s/hr)
            float cost = kwhr * tracker.PriceKWHr;

            _appearance.SetData(supplier.Owner, PowerDeviceVisuals.Powered, supplier.CurrentSupply > 0);

            var station = _station.GetOwningStation(tracker.Owner);
            if (station != null)
            {
                var stationTracker = EnsureComp<StationPowerTrackerComponent>(station.Value);
                stationTracker.TotalEnergy += kwhr;
                stationTracker.TotalPrice += cost;
            }
        }
    }

    private void OnExamined(EntityUid uid, PowerTrackedComponent comp, ExaminedEvent args)
    {
        if (args.IsInDetailsRange)
        {
            var station = _station.GetOwningStation(comp.Owner);
            if (station != null && TryComp<PowerSupplierComponent>(uid, out var power))
            {
                var stationTracker = EnsureComp<StationPowerTrackerComponent>(station.Value);
                args.PushMarkup(Loc.GetString("power-tracker-examine",
                            ("power", (power.CurrentSupply / 1000f).ToString("F2")),
                            ("totalEnergy", stationTracker.TotalEnergy.ToString("F2")),
                            ("totalPrice", stationTracker.TotalPrice.ToString("F1"))));
            }
        }
    }
}
